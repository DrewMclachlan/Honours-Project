#!/usr/bin/env node


/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('honours-project:server');
var http = require('http');
var handlers = require('../routes/handlers');
var Message = require('../schema/message');
var uuid = require('uuid');
/**
 * Get port from environment and store in Express.
 */
//Change back to 80 for deployment
var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);


/**
 * Create HTTP server.
 */



/**
 * Listen on provided port, on all network interfaces.
 */


var server = http.createServer(app);
//called when the client is first connected
var io = require('socket.io').listen(server);
app.io = io;
io.on('connection', function(socket) {
    console.log('a user has been connected');





    //called on sign up
    socket.on('newuser', function(data) {
        handlers.add(data.username, data.email, data.password)
    });

    //called on login
    socket.on('userL', function(data) {
      handlers.check(data.username, data.password)
          .then(function(result){
            console.log(result);
            if(result === 'auth'){
              socket.emit('auth','auth')
            }else{
              socket.emit('auth','incorrect')
            }
          })
    });

    //caled when client first connects to send all mesages
    socket.on('send', function(){
        setTimeout(function(){
            Message.find()
                .then(msglist => socket.emit('getlist', msglist))
        }, 10);
          });

//called when new message
    socket.on('newmessage', function(msg) {
        var id = uuid.v4();
        msg.mid = id;
        io.sockets.emit('newmsg', msg);
        handlers.message(id, msg.op, msg.content, msg.time, msg.tag);
    });


//called when profile username is sent
    socket.on('profileUsername', function(pname) {
        console.log(pname);
        profile(pname)
    });



    //called to send the data back
    function profile (pname){
        handlers.findPM(pname)
            .then(function(result){
                console.log(result);
                socket.emit('transfer', {result, pname})
            })
    }




});

io.on('disconnect', function(){
 console.log('user disconnect')
});




server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
